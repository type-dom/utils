const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const TerserPlugin = require("terser-webpack-plugin");
module.exports = {
  plugins: [
    new CleanWebpackPlugin(),
  ],
  optimization: {
    // usedExports: true, // production自动设置为true
    moduleIds: 'deterministic', // 未变化的 hash 都应该保持一致
    minimize: true,
    minimizer: [
      new CssMinimizerPlugin(),
      // 关于 source maps 说明
      // 只对 devtool 选项的 source-map，inline-source-map，hidden-source-map 和 nosources-source-map 有效。
      // 为何如此？
      // eval 会包裹 modules，通过 eval("string")，而 minimizer 不会处理字符串。
      // cheap 不存在列信息，minimizer 只产生单行，只会留下一个映射。
      // 使用支持的 devtool 值可以生成 source map。
      // todo 不生效问题
      // new TerserPlugin({
      //   // minify: ''
      //   terserOptions: {
      //     ecma: undefined,
      //     parse: {},
      //     module: false,
      //     output: null,
      //     format: null,
      //     toplevel: false,// 底层变量是否进行转换；
      //     nameCache: null,
      //     ie8: false,
      //     keep_classnames: undefined, // 保留类的名称；
      //     keep_fnames: false,// 保留函数的名称
      //     safari10: false,
      //     // warnings: false, // error
      //     compress: { // 设置压缩相关的选项
      //       drop_console: true, // 不生效
      //       // drop_debugger: true,
      //       pure_funcs: ['console.log']
      //     },
      //     mangle: true, // Note `mangle.properties` is `false` by default.设置丑化相关的选项，可以直接设置为true；
      //   }
      // }),
      (compiler) => { // 生效了 ？？？？？？
        new TerserPlugin({
          terserOptions: {
            ecma: undefined,
            parse: {},
            // compress: true,
            compress: { // 设置压缩相关的选项
              drop_console: true,
              drop_debugger: true,
              pure_funcs: ['console.log'],
              toplevel: true,
            },
            mangle: {
              keep_classnames: false,// 保留类的名称；
              keep_fnames: false,// 保留函数的名称
            }, // Note `mangle.properties` is `false` by default.设置丑化相关的选项，可以直接设置为true；
            module: false,
            // Deprecated
            // output: null,
            format: null,
            toplevel: true,
            nameCache: null,
            ie8: false,
            // keep_classnames: false,// 保留类的名称；
            // keep_fnames: false,// 保留函数的名称
            safari10: false,
          }
        }).apply(compiler);
      },
    ]
  },
  devtool: undefined
};
