// 引入路径管理模块
const path = require('path');

// 引入html打包插件
const HtmlWebpackPlugin = require('html-webpack-plugin');

// 提取css
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
// 压缩css
// const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin');
// const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
// const TerserPlugin = require("terser-webpack-plugin");
// 查看当前是哪种模式
console.log('当前模式', process.env.NODE_ENV);

module.exports = {
  // 入口 (单个入口 或多个入口)
  entry: {
    ofdEditor: './src/example-editor.ts',
    ofdReader: './src/example-reader.ts',
    ofdFile: './src/example-file.ts',
    // 正式使用时，这个要注掉
    // editor: './src/ofd-editor.ts',
    // layout: './src/layout/layout.class.ts'
  },
  // 出口
  output: {
    // 文件名称（指定名称+目录）
    filename: '[name].[chunk-hash:8].js', // fullhash chunkhash contenthash
    // 输出文件目录（将所有资源输出的公共目录）
    path: path.resolve(__dirname, '../dist'),
    clean: true,
    // 所有资源引入公共路径前缀 --> 'imgs/a.jpg' --> '/imgs/a.jpg'
    // publicPath: 'public/', // 添加后项目没有页面了。
    // chunkFilename: 'js/[name]_chunk.js', // 自定义非入口chunk的名称
    // library 一般是结合dll使用
    // library: '[name]', // 整个库向外暴露的变量名
    // libraryTarget: 'window' // 变量名添加到哪个全局上，browser浏览器端添加到window上
    // libraryTarget: 'global' // 变量名添加到哪个全局上，node服务端添加到global上
    // libraryTarget: 'commonjs'
  },
  resolve: {
    // 配置省略文件路径的后缀名，引用文件时，后缀名就可以省略了
    extensions: ['.js', '.ts', '.tsx'] // '.json', '.css'],
    // 告诉 webpack 解析模块是去找哪个目录,下面这样配置之后，可以直接按照路径找到node_modules,不用再挨个遍历了
    // modules: [path.resolve(__dirname, '../../node_modules'), 'node_modules']
  },
  target: 'web',
  // 加载器
  module: {
    rules: [
      {
        test: /\.tsx?$/i,
        use: [{
          loader: 'ts-loader'
        }],
        exclude: /node_modules/
      },
      {
        // eslint只检查ts语法
        test: /\.ts$/,
        loader: 'eslint-loader',
        enforce: 'pre',
        include: path.resolve(__dirname, 'src'), // 指定检查的目录
        // 只检查自己写的js代码不检查第三方库的代码
        exclude: /node_modules/,
        options: { // 这里的配置项参数将会被传递到 eslint 的 CLIEngine
          // formatter: require('eslint-friendly-formatter'), // 指定错误报告的格式规范
          // 自动修复可以修复的错误
          fix: true
        }
      },
      // css
      {
        test: /\.css$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader
          },
          {
            loader: 'css-loader',
            options: {
              importLoaders: 1
            }
          },
          {
            loader: 'postcss-loader'
          }
        ]
      },
      // less todo scss
      {
        test: /\.less$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              publicPath: '../'
            }
          },
          'css-loader',
          'postcss-loader',   // 处理css兼容性
          'less-loader'
        ]
      },
      // Extracts the compiled CSS from the SASS files defined in the entry
      {
        test: /\.scss$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader
          },
          {
            // Interprets CSS
            loader: 'css-loader',
            options: {
              importLoaders: 2
            }
          },
          'postcss-loader',   // 处理css兼容性
          {
            loader: 'sass-loader' // 将 Sass 编译成 CSS
          }
        ]
      },
      // css中图像
      {
        test: /\.(jpg|png|gif)$/,
        loader: 'url-loader',
        options: {
          name: '[hash:10].[ext]',
          limit: 10 * 1024,
          outputPath: 'images', // 把图像打包到指定目录
          esModule: false
        }
      },
      // html图像
      {
        test: /\.html$/,
        loader: 'html-loader'
      },
      // 字体图标
      {
        test: /\.(eot|svg|ttf|otf|woff|woff2)$/, // 处理的格式
        // 只命中指定 目录下的文件，加快Webpack 搜索速度
        include: path.resolve(__dirname, 'src/assets'), // 指定检查的目录
        // 排除 node_modules 目录下的文件
        exclude: /(node_modules)/,
        loader: 'file-loader',
        options: {
          // 文件的最终名称
          name: '[name].[hash:7].[ext]', // 输出文件名设置
          outputPath: 'fonts' // 输出目录
        }
      },
      // es6转es5
      {
        test: /\.js$/,
        loader: 'babel-loader',
        exclude: /node_modules/ // 不要处理node_modules
      }
    ]
  },
  plugins: [
    // 多个html页面
    new HtmlWebpackPlugin({
      template: './public/example-ofd-editor.html', // 把哪个html文件打包到dist目录中
      title: 'ofd editor ',
      filename: 'example-ofd-editor.html', // 输出什么名字 默认 index.html
      // chunks: ['advertisement', 'commCss', 'dom', 'utils'],
      // todo ??? 当前页面所需要哪些模块 模块引入顺序和入口设置时的先后有关
      minify: {
        collapseWhitespace: true
      },
      hash: true
    }),
    new HtmlWebpackPlugin({
      template: './public/example-ofd-reader.html', // 把哪个html文件打包到dist目录中
      title: 'ofd reader ',
      filename: 'example-ofd-reader.html', // 输出什么名字 默认 index.html
      // chunks: ['advertisement', 'commCss', 'dom', 'utils'],
      minify: {
        collapseWhitespace: true
      },
      hash: true
    }),
    new HtmlWebpackPlugin({
      template: './public/example-ofd-file.html', // 把哪个html文件打包到dist目录中
      title: 'ofd file ',
      filename: 'example-ofd-file.html', // 输出什么名字 默认 index.html
      // chunks: ['advertisement', 'commCss', 'dom', 'utils'],
      minify: {
        collapseWhitespace: true
      },
      hash: true
    }),
    // 提取css
    new MiniCssExtractPlugin({
      filename: 'css/[name].css'  // 设置css输出的文件名
    }),
    // 压缩css
    // new OptimizeCssAssetsWebpackPlugin() // webpack5 支持有问题
    // new CompressionPlugin(),
    // 检查循环依赖
    // new CircularDependencyPlugin({
    //   exclude: /node_modules/,
    //   include: /ofd-file/,
    //   failOnError: false,
    //   allowAsyncCycles: true,
    //   cwd: process.cwd()
    // })
  ],
  optimization: {
    moduleIds: 'deterministic', // 未变化的 hash 都应该保持一致
    runtimeChunk: 'single', // 拆包 runtime
    splitChunks: {
      // include all types of chunks
      chunks: 'all',
      minSize: 20000,
      minRemainingSize: 0,
      minChunks: 1,
      // maxAsyncRequests: 30,
      maxInitialRequests: 30,
      enforceSizeThreshold: 50000,
      cacheGroups: {
        vendor: { // 拆包 vendors
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all'
        }
      }
    },
    // minimize: true,
    // minimizer: [
    //   new CssMinimizerPlugin(),
    //   // new TerserPlugin()
    // ]
  },
  // 模式   development  production
  // mode: process.env.NODE_ENV === 'dev' ? 'development' : 'production',
  // {
  // allowedHosts?,
  // bonjour?, client?, compress?, devMiddleware?,
  // headers?, historyApiFallback?, host?, hot?, http2?, https?,
  // ipc?, liveReload?,
  // onAfterSetupMiddleware?,
  // onBeforeSetupMiddleware?,
  // onListening?, open?,
  // port?, proxy?,
  // setupExitSignals?, static?,
  // watchFiles?, webSocketServer?
  // }
  devServer: {
    // 启动gzip压缩
    // compress: true,
    // 端口号
    port: 8088,
    // 域名
    // host: 'localhost',
    // 自动打开浏览器    // 自动打开服务
    // open: true,
    // 开启HMR功能 devServer上支持了HMR
    // 当更改了webpack配置后，新配置要想生效，必须重启webpack服务
    hot: true,
    // 服务器代理 --> 解决开发环境跨域问题
    proxy: {
      // 浏览器与服务器之间存在跨域问题，但与代理服务器之间不存在跨域，代理服务器与服务器之间也不存在跨域，所以，发送到代理服务器，再由它转发到服务器，可以避免跨域
      // 一旦devServer(5000)服务器接受到 /api/xxx 的请求，就会把请求转发到另外一个服务器(3000)
      '/api': {
        target: 'http://localhost:3000',
        // 发送请求时，请求路径重写：将 /api/xxx --> /xxx （去掉/api）
        pathRewrite: {
          '^/api': ''
        }
      }
    }
  },
  devtool: false
};
